// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once

WINRT_EXPORT namespace winrt::vaporCaffe {

struct IMainPage;
struct MainPage;

}

namespace winrt::impl {

template <> struct category<vaporCaffe::IMainPage>{ using type = interface_category; };
template <> struct category<vaporCaffe::MainPage>{ using type = class_category; };
template <> struct name<vaporCaffe::IMainPage>{ static constexpr auto & value{ L"vaporCaffe.IMainPage" }; };
template <> struct name<vaporCaffe::MainPage>{ static constexpr auto & value{ L"vaporCaffe.MainPage" }; };
template <> struct guid<vaporCaffe::IMainPage>{ static constexpr GUID value{ 0xE386EEEE,0x071A,0x5C5C,{ 0xB1,0x9E,0xD5,0xA4,0xCE,0xFB,0xF9,0x02 } }; };
template <> struct default_interface<vaporCaffe::MainPage>{ using type = vaporCaffe::IMainPage; };

template <typename D>
struct consume_vaporCaffe_IMainPage
{
    int32_t MyProperty() const;
    void MyProperty(int32_t value) const;
};
template <> struct consume<vaporCaffe::IMainPage> { template <typename D> using type = consume_vaporCaffe_IMainPage<D>; };

template <> struct abi<vaporCaffe::IMainPage>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_MyProperty(int32_t* result) noexcept = 0;
    virtual HRESULT __stdcall put_MyProperty(int32_t value) noexcept = 0;
};};

}
